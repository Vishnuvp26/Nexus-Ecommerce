<%- include("../layout/adminHeader") %>
<%- include("../layout/adminSidebarHead") %>

<div class="main-panel">
  <div class="content-wrapper">
    <div class="page-header pt-5">
      <h3 class="page-title">
        <span class="page-title-icon btn-gradient-primary text-white mr-2">
          <i class="mdi mdi-cube-outline menu-icon"></i>
        </span>Add Product
      </h3>
      <nav aria-label="breadcrumb">
        <ul class="breadcrumb">
          <li class="breadcrumb-item active" aria-current="page">
            <span></span>
            <button class="btn btn-outline-github" onclick="location.href='/admin/products'">Back to Products</button>
          </li>
        </ul>
      </nav>
    </div>

    <div class="col-12 grid-margin stretch-card">
      <div class="card">
        <div class="card-body">

          <!------ADD PRODUCT FORM------>
          <form class="forms-sample" method="post" enctype="multipart/form-data" onsubmit="return validateForm(event)">
            <!-- Name -->
            <div class="form-group">
              <label for="productName">Product Name</label>
              <input type="text" class="form-control" id="productName" name="productName" placeholder="Enter the Product Name">
              <small id="productNameError" class="text-danger"></small>
            </div>
          
            <!-- Category -->
            <div class="form-group">
              <label for="category">Category</label>
              <select class="form-control" id="category" name="categoryName">
                <option disabled selected value="">Nothing selected</option>
                <% 
                let activeCategories = category.filter(cat => cat.status === 'active'); 
                for(let i = 0; i < activeCategories.length; i++){ %>
                  <option value="<%= activeCategories[i].categoryName %>"><%= activeCategories[i].categoryName %></option>
                <% } %>
              </select>
              <small id="categoryError" class="text-danger"></small>
            </div>
          
            <!-- Image 1 -->
            <div class="form-group">
              <label for="image1">Image 1</label>
              <input type="file" name="image1" class="file-upload-default" accept="image/*" onchange="previewImage(event)" id="image1Input">
              <div class="input-group col-xs-12">
                <input type="text" class="form-control file-upload-info" disabled placeholder="Upload Image 1" value="">
                <span class="input-group-append">
                  <button class="file-upload-browse btn btn-inverse-dark" type="button" onclick="document.getElementById('image1Input').click()">Upload</button>
                </span>
              </div>
              <img id="image1Preview" class="img-preview" style="display: none;" />
              <small id="image1Error" class="text-danger"></small>
            </div>

            <!-- Image 2 -->
            <div class="form-group">
              <label for="image2">Image 2</label>
              <input type="file" name="image2" class="file-upload-default" accept="image/*" onchange="previewImage(event)" id="image2Input">
              <div class="input-group col-xs-12">
                <input type="text" class="form-control file-upload-info" disabled placeholder="Upload Image 2" value="">
                <span class="input-group-append">
                  <button class="file-upload-browse btn btn-inverse-dark" type="button" onclick="document.getElementById('image2Input').click()">Upload</button>
                </span>
              </div>
              <img id="image2Preview" class="img-preview" style="display: none;" />
              <small id="image2Error" class="text-danger"></small>
            </div>

            <!-- Image 3 -->
            <div class="form-group">
              <label for="image3">Image 3</label>
              <input type="file" name="image3" class="file-upload-default" accept="image/*" onchange="previewImage(event)" id="image3Input">
              <div class="input-group col-xs-12">
                <input type="text" class="form-control file-upload-info" disabled placeholder="Upload Image 3" value="">
                <span class="input-group-append">
                  <button class="file-upload-browse btn btn-inverse-dark" type="button" onclick="document.getElementById('image3Input').click()">Upload</button>
                </span>
              </div>
              <img id="image3Preview" class="img-preview" style="display: none;" />
              <small id="image3Error" class="text-danger"></small>
            </div>

            <!-- Quantity -->   
            <div class="form-group">
              <label for="quantity">Quantity</label>
              <input type="number" class="form-control" id="quantity" name="quantity" placeholder="Enter the Quantity">
              <small id="quantityError" class="text-danger"></small>
            </div>
          
            <!-- Price -->
            <div class="form-group">
              <label for="price">Price</label>
              <input type="text" class="form-control" id="price" name="price" placeholder="Enter the Price">
              <small id="priceError" class="text-danger"></small>
            </div>

            <!-- Highlights -->
            <div class="form-group">
              <label for="highlights">Highlights</label>
              <textarea class="form-control" id="highlights" name="highlights" rows="4" placeholder="Enter each feature on a new line"></textarea>
              <small id="highlightsError" class="text-danger"></small>
            </div>

            <!-- Details -->
            <div class="form-group">
              <label for="productDetails">Product Details</label>
              <textarea class="form-control" id="productDetails" name="productDetails" rows="4"></textarea>
              <small id="productDetailsError" class="text-danger"></small>
            </div>

            <!-- Description -->
            <div class="form-group">
              <label for="productDescription">Product Description</label>
              <textarea class="form-control" id="productDescription" name="productDescription" rows="4"></textarea>
              <small id="productDescriptionError" class="text-danger"></small>
            </div>
          
            <button type="submit" class="btn btn-success mr-2">Add</button>
            <a href="/admin/products" class="btn btn-danger">Cancel</a>
          </form>          
          <!------PRODUCT FORM END------>

        </div>
      </div>
    </div>    
  </div>
</div>
<%- include("../layout/adminSidebarFoot") %>

<!-- Modal for cropping -->
<div id="cropperModal" class="modal">
  <div class="modal-content">
      <div class="cropper-container">
          <img id="cropperImage" src="" alt="Image for cropping" />
      </div>
      <button onclick="cropImage()">Crop</button>
      <button onclick="closeModal()">Cancel</button>
  </div>
</div>

<style>
  .modal-content {
        margin: 10% auto;
        padding: 20px;
        width: 80%;
        max-width: 600px;
        background-color: #363636;
    }
    .cropper-container {
        width: 100%;
        max-height: 400px;
        margin-bottom: 10px;
    }
</style>

<!--===============================================================================================-->
<link href="https://unpkg.com/cropperjs/dist/cropper.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js"></script>
<script src="https://unpkg.com/cropperjs"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
  let cropper;
  let currentInput;
  let currentPreviewId;
  let croppedFiles = new Map(); // To store the cropped files
  
  function previewImage(event) {
      const input = event.target;
      const file = input.files[0];
      currentInput = input; // Save the reference to the current input
      currentPreviewId = `${input.name}Preview`; // Save the preview element id
  
      if (file) {
          const reader = new FileReader();
          reader.onload = function(e) {
              const cropperImage = document.getElementById('cropperImage');
              cropperImage.src = e.target.result;
              document.getElementById('cropperModal').style.display = 'block';
              if (cropper) {
                  cropper.destroy();
              }
              cropper = new Cropper(cropperImage, {
                  aspectRatio: 1, // Portrait aspect ratio
                  viewMode: 1,
              });
          };
          reader.readAsDataURL(file);
      }
  }
  
  function cropImage() {
      if (cropper) {
          cropper.getCroppedCanvas({
              width: 300, // desired width
              height: 400, // desired height
          }).toBlob(function(blob) {
              const croppedImageSrc = URL.createObjectURL(blob);
  
              // Get the preview container and image element
              const previewContainer = document.getElementById(currentPreviewId);
              if (previewContainer) {
                  previewContainer.src = croppedImageSrc;
                  previewContainer.style.display = 'block'; // Make the preview visible
              }
  
              // Replace the file input with the cropped image blob
              const dataTransfer = new DataTransfer();
              const file = new File([blob], `croppedImage_${Date.now()}.jpg`, { type: "image/jpeg" });
              dataTransfer.items.add(file);
              currentInput.files = dataTransfer.files;
  
              // Store the cropped file in the Map
              croppedFiles.set(currentInput.name, file);
  
              closeModal();
          }, 'image/jpeg');
      }
  }
  
  function closeModal() {
      document.getElementById('cropperModal').style.display = 'none';
      if (cropper) {
          cropper.destroy();
          cropper = null;
      }
  }
  
  document.addEventListener("DOMContentLoaded", function() {
      async function validateForm(event) {
          event.preventDefault();
  
          let productName = document.getElementById('productName').value.trim();
          let quantity = document.getElementById('quantity').value.trim();
          let price = document.getElementById('price').value.trim();
          let productDescription = document.getElementById('productDescription').value.trim();
          let highlights = document.getElementById('highlights').value.trim(); // New field
          let productDetails = document.getElementById('productDetails').value.trim(); // New field
          let imageInputs = document.querySelectorAll(".file-upload-default");
          let category = document.getElementById('category').value;
  
          let nameRegex = /^[a-zA-Z0-9\s]+$/;
          let numberRegex = /^\d+$/;
          let priceRegex = /^\d+(\.\d{1,2})?$/;
          let isValid = true;
  
          // Clear previous error messages
          document.getElementById('productNameError').innerText = '';
          document.getElementById('quantityError').innerText = '';
          document.getElementById('priceError').innerText = '';
          document.getElementById('productDescriptionError').innerText = '';
          document.getElementById('image1Error').innerText = '';
          document.getElementById('image2Error').innerText = '';
          document.getElementById('image3Error').innerText = '';
          document.getElementById('categoryError').innerText = '';
          document.getElementById('highlightsError').innerText = ''; 
          document.getElementById('productDetailsError').innerText = '';
  
          try {
              // Check if product name already exists
              const response = await axios.get(`/admin/checkAlready?productName=${encodeURIComponent(productName)}`);
              if (response.data.exists) {
                  document.getElementById('productNameError').innerText = 'Product Name already exists';
                  isValid = false;
              }
          } catch (error) {
              console.error('Error checking product name:', error);
              document.getElementById('productNameError').innerText = 'Error checking product name';
              isValid = false;
          }
  
          if (!nameRegex.test(productName)) {
              document.getElementById('productNameError').innerText = 'Product Name must be alphanumeric';
              isValid = false;
          }
  
          if (!category) {
              document.getElementById('categoryError').innerText = 'Category is required';
              isValid = false;
          }
  
          if (!quantity.match(numberRegex) || quantity <= 0) {
              document.getElementById('quantityError').innerText = 'Quantity should be at least 1';
              isValid = false;
          }
  
          if (!priceRegex.test(price) || price <= 0) {
              document.getElementById('priceError').innerText = 'Price must be a number greater than 0';
              isValid = false;
          }
  
          if (productDescription.length === 0) {
              document.getElementById('productDescriptionError').innerText = 'Product Description is required';
              isValid = false;
          }
  
          if (highlights.length === 0) { // New field
              document.getElementById('highlightsError').innerText = 'Highlights are required';
              isValid = false;
          }
  
          if (productDetails.length === 0) { // New field
              document.getElementById('productDetailsError').innerText = 'Product Details are required';
              isValid = false;
          }
  
          imageInputs.forEach((input, index) => {
              const errorElement = document.getElementById(`image${index + 1}Error`);
              if (input.files.length === 0) {
                  errorElement.innerText = `Select at least one image for Image ${index + 1}`;
                  isValid = false;
              } else {
                  let fileName = input.files[0].name;
                  let extensions = /\.(jpg|jpeg|png)$/i;
                  if (!extensions.test(fileName)) {
                      errorElement.innerText = 'Select only valid Image files (jpg/jpeg/png)';
                      isValid = false;
                  }
              }
          });
  
          if (isValid) {
              try {
                  const formData = new FormData(event.target);
                  const response = await axios.post('/admin/addProducts', formData, {
                      headers: {
                          'Content-Type': 'multipart/form-data'
                      }
                  });
  
                  if (response.data.success) {
                      Swal.fire({
                          icon: 'success',
                          title: 'Success!',
                          text: 'Product added successfully',
                          timer: 2000,
                          showConfirmButton: false
                      }).then(() => {
                          window.location.href = '/admin/products';
                      });
                  } else {
                      Swal.fire({
                          icon: 'error',
                          title: 'Error!',
                          text: response.data.message
                      });
                  }
              } catch (error) {
                  console.error('Error adding product:', error);
                  Swal.fire({
                      icon: 'error',
                      title: 'Error!',
                      text: 'Failed to add product. Please try again.'
                  });
              }
          } else {
              return false;
          }
      }
  
      document.querySelector('form').addEventListener('submit', validateForm);
  });
  </script>  
<!--===============================================================================================-->
<%- include("../layout/adminFooter") %>