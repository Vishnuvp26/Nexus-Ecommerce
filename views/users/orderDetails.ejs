<%- include("../layout/header") %>
<!-- Navbar -->
<%- include("../layout/navbar") %>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@mdi/font/css/materialdesignicons.min.css">
<link rel="stylesheet" href="/css/orderDetails.css">

<!-- Breadcrumb -->
<div class="container p-t-75" id="breadcrumb-container">
    <div class="bread-crumb flex-w p-l-25 p-r-15 p-t-30 p-lr-0-lg">
        <a href="/" class="stext-109 cl8 hov-cl1 trans-04">
            Home
            <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
        </a>
        <a href="/profile" class="stext-109 cl8 hov-cl1 trans-04">
            Profile
            <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
        </a>
        <a href="/view-orders" class="stext-109 cl8 hov-cl1 trans-04">
            Orders
            <i class="fa fa-angle-right m-l-9 m-r-10" aria-hidden="true"></i>
        </a>
        <span class="stext-109 cl4">
            View Orders
        </span>
    </div>
</div>

<div class="container mt-5">
    <div class="card">
        <div class="card-header text-center">
            <h4 class="text-dark">Order Details</h4>
            <p>Ordered on <%= new Date(order.date).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %>  |  Order ID : <%= order.orderId %></p>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-5">
                    <h6 class="font-weight-bold text-dark">Shipping Address</h6>
                    <p class="mt-2">
                        <%= order.address.name %><br>
                        +91 <%= order.address.phone %><br>
                        <%= order.address.house %> (H)<br>
                        <%= order.address.district %><br>
                        <%= order.address.city %>, <%= order.address.state %> <%= order.address.pincode %><br>
                    </p>
                </div>
                <div class="col-md-4">
                    <h6 class="font-weight-bold text-dark">Payment Method</h6>
                    <p class="mt-2"><%= order.paymentMethod %></p>
                </div>
                <div class="col-md-3">
                    <h6 class="font-weight-bold text-dark">Payment Status</h6>
                    <p class="mt-2"><%= order.paymentStatus %></p>
                    <% if (order.paymentMethod === 'razorpay' && order.paymentStatus === 'Pending') { %>
                        <button type="button" class="btn btn-sm btn-paynow mt-3" onclick="payNow('<%= order._id %>')">
                            <i></i> Pay Now
                        </button>
                    <% } %>
                </div>
                <% if (order.items.every(item => item.itemStatus === 'Delivered' || item.itemStatus === 'Cancelled')) { %>
                    <div class="row ml-0">
                        <div class="col-md-12 text-right">
                            <button class="btn btn-sm btn-cancel mt-3" onclick="downloadInvoice()">
                                <i class="mdi mdi-download"></i> Download Invoice
                            </button>
                        </div>                        
                    </div>
                <% } %>
            </div>  
            <div class="row mt-4">
                <div class="col-md-12">
                    <div class="table-responsive">
                        <table class="table mt-2">
                            <thead class="text-center">
                                <tr>
                                    <th scope="col">Product Name</th>
                                    <th scope="col">Category</th>
                                    <th scope="col">Image</th>
                                    <th scope="col">Quantity</th>
                                    <th scope="col">Final Price</th>
                                    <th scope="col">Order Status</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% order.items.forEach(function(item) { %>
                                    <tr>
                                        <td><%= item.productName %></td>
                                        <td><%= item.categoryName %></td>
                                        <td><img src="/productimages/<%= item.image %>" alt="<%= item.productName %>" class="img-fluid" style="max-width: 100px;"></td>
                                        <td><%= item.quantity %></td>
                                        <td>&#8377;<%= (item.quantity * (item.finalPrice && item.finalPrice !== item.price ? item.finalPrice : item.price)).toFixed(2) %></td>
                                        <td class="<%= item.itemStatus === 'Cancelled' ? 'text-danger' : item.itemStatus === 'Delivered' ? 'text-success' : item.itemStatus === 'Returned' ? 'text-primary' :  item.itemStatus === 'Return Pending' ? 'text-primary' : '' %>"><%= item.itemStatus %></td>
                                        <td>
                                            <% if ((item.itemStatus !== 'Cancelled' && item.itemStatus !== 'Delivered' && item.itemStatus !== 'Returned' && item.itemStatus !== 'Return Pending') 
                                                && !(order.paymentMethod === 'razorpay' && order.paymentStatus === 'Pending')) { %>
                                                <button type="button" class="btn btn-sm btn-cancel" onclick="confirmCancelOrder('<%= item.productId %>', '<%= order._id %>')">
                                                    <i class="fa fa-times"></i> Cancel
                                                </button>
                                            <% } else if (item.itemStatus === 'Delivered') { %>
                                                <button type="button" class="btn btn-sm btn-return" onclick="showReturnModal('<%= item.productId %>', '<%= order._id %>')">
                                                    <i class="fa fa-undo"></i> Return
                                                </button>
                                            <% } %>
                                        </td>
                                        
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>                        
                    </div>
                </div>
            </div>
            <div class="row mt-2">
                <div class="col-md-6">
                    <h6>Order Summary</h6>
                    <p class="font-weight-bold text-dark">
                        Item(s) Subtotal : &#8377;<%= order.items.reduce((total, item) => {
                            return total + (item.quantity * (item.finalPrice && item.finalPrice !== item.price ? item.finalPrice : item.price));
                        }, 0).toFixed(2) %><br>
                    </p>
                </div>
            </div>            
        </div>
    </div>
</div>

<!-- Modal HTML -->
<div class="modal fade modal-custom" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="returnModalLabel">Return Product ?</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="returnForm">
                    <div class="form-group">
                        <label for="returnReason">Reason for Return</label>
                        <select class="form-control" id="returnReason" required>
                            <option value="" disabled selected>Select a reason</option>
                            <option value="Damaged product"><small>Damaged product</small></option>
                            <option value="Wrong item received"><small>Wrong item received</small></option>
                            <option value="Item not as described"><small>Item not as described</small></option>
                            <option value="Duplicate Order"><small>Duplicate Order</small></option>
                            <option value="Changed mind"><small>Changed mind</small></option>
                            <option value="Better price available"><small>Better price available</small></option>
                            <option value="Other"><small>Other</small></option>
                        </select>                        
                    </div>
                    <input type="hidden" id="returnProductId">
                    <input type="hidden" id="returnOrderId">
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btn-sm" data-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-sm btnSubmitReq" form="returnForm">Submit Request</button>
            </div>
        </div>
    </div>
</div>

<table class="invoiceTable" style="display: none;">
    <thead>
        <tr>
            <th>Product Name</th>
            <th>Price</th>
            <th>Quantity</th>
            <th>Status</th>
            <th>Total</th>
        </tr>
    </thead>
    <tbody>
        <% order.items.forEach(function(item) { 
            const price = item.finalPrice && item.finalPrice !== item.price ? item.finalPrice : item.price;
            const total = price * item.quantity;
        %>
        <tr>
            <td><%= item.productName %></td>
            <td>&#8377;<%= price.toFixed(2) %></td>
            <td><%= item.quantity %></td>
            <td><%= item.itemStatus %></td>
            <td>&#8377;<%= total.toFixed(2) %></td>
        </tr>
        <% }); %>
    </tbody>
</table>

<%- include("../layout/footer.ejs") %>

<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.25/jspdf.plugin.autotable.min.js"></script>

<!-- Invoice -->
<script>
    function downloadInvoice() {
        const doc = new window.jspdf.jsPDF();
        const pageCenter = doc.internal.pageSize.getWidth() / 2;

        doc.setFontSize(25);
        doc.setTextColor(95, 155, 159);
        doc.text("N E X U S", pageCenter, 20, { align: 'center' });
        doc.setFontSize(15);
        doc.setTextColor(40, 40, 40);
        doc.text("Invoice", pageCenter, 30, { align: 'center' });

        const orderId = "<%= order.orderId %>";
        const orderDate = "<%= new Date(order.date).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %>";
        const invoiceDate = new Date().toLocaleDateString();
        const name = "<%= order.address.name %>";
        const mobile = "<%= order.address.phone %>";
        const house = "<%= order.address.house %> (H)";
        const city = "<%= order.address.city %>";
        const state = "<%= order.address.state %>";
        const pin = "<%= order.address.pincode %>";
        const paymentMethod = "<%= order.paymentMethod %>";

        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        doc.text(`Order ID: ${orderId}`, 20, 40);
        doc.text(`Ordered Date: ${orderDate}`, 20, 45);
        doc.text(`Invoice Date: ${invoiceDate}`, 20, 50);

        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        const shipFromX = pageCenter;
        doc.text("From Address:", shipFromX, 60);
        doc.setFontSize(10);
        doc.text("Nexus Watch Stores,\n4th Floor HiLite Mall,\nCalicut,\nKerala,\n673655", shipFromX, 65);

        const shippingAddressStartX = 20;
        doc.setFontSize(12);
        doc.text(`Shipping Address :`, shippingAddressStartX, 60);
        doc.setFontSize(10);
        doc.text(`Name : ${name}`, shippingAddressStartX, 65);
        doc.text(`Mobile : ${mobile}`, shippingAddressStartX, 70);
        doc.text(`House no : ${house}`, shippingAddressStartX, 75);
        doc.text(`City : ${city}`, shippingAddressStartX, 85);
        doc.text(`State : ${state}`, shippingAddressStartX, 90);
        doc.text(`Pin : ${pin}`, shippingAddressStartX, 95);
        doc.text(`Payment Method : ${paymentMethod}`, shippingAddressStartX, 105);

        const table = document.querySelector(".invoiceTable");
        const tableData = Array.from(table.querySelectorAll('tbody tr'))
            .filter(row => {
                const statusCell = row.querySelectorAll('td')[3];
                return statusCell && !statusCell.innerText.includes("Cancelled");
            })
            .map(row => {
                return Array.from(row.querySelectorAll('td')).map(cell => cell.innerText.trim());
            });

        doc.autoTable({
            head: [['Product Name', 'Price (Rs)', 'Quantity', 'Status', 'Total (Rs)']],
            body: tableData,
            startY: 120,
            theme: 'striped',
            headStyles: { fillColor: [40, 40, 40] },
            styles: { halign: 'left' },
        });

        let total = 0;
        tableData.forEach(row => {
            const totalPrice = parseFloat(row[4].replace('₹', '').replace(',', ''));
            if (!isNaN(totalPrice)) {
                total += totalPrice;
            }
        });
        const grandTotal = total.toFixed(2);

        const finalY = doc.lastAutoTable.finalY + 10;
        doc.setFontSize(14);
        doc.setTextColor(0, 0, 0);
        doc.setFont('helvetica', 'bold');
        doc.text(`Grand Total: Rs ${grandTotal}`, doc.internal.pageSize.getWidth() - 20, finalY + 10, { align: 'right' });

        doc.save("order_invoice.pdf");
    }
</script>

<!-- Cancel order -->
<script>
    function confirmCancelOrder(productId, orderId) {
    Swal.fire({
        title: 'Are you sure?',
        text: "Do you want to cancel this order?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
    }).then((result) => {
        if (result.isConfirmed) {
            cancelOrder(productId, orderId);
        }
    });
}

function cancelOrder(productId, orderId) {
    axios.post('/cancel-order', { productId, orderId })
        .then(response => {
            if (response.data.success) {
                Swal.fire(
                    'Cancelled!',
                    'Your order item has been cancelled.',
                    'success'
                ).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire(
                    'Error!',
                    response.data.message || 'There was an error cancelling your order item.',
                    'error'
                );
            }
        })
        .catch(error => {
            console.error('There was an error cancelling the order item:', error);
            Swal.fire(
                'Error!',
                'There was an error cancelling your order item.',
                'error'
            );
        });
}

</script>

<!-- Return Product -->
<script>
      function showReturnModal(productId, orderId) {
        $('#returnProductId').val(productId);
        $('#returnOrderId').val(orderId);
        $('#returnModal').modal('show');
    }

    function submitReturnRequest() {
    const productId = document.getElementById('returnProductId').value;
    const orderId = document.getElementById('returnOrderId').value;
    const reason = document.getElementById('returnReason').value;

    if (!reason) {
        Swal.fire(
            'Error!',
            'Please select a reason for the return.',
            'error'
        );
        return;
    }

    axios.post('/return-product', { productId, orderId, reason })
        .then(response => {
            if (response.data.success) {
                Swal.fire(
                    'Success!',
                    response.data.message,
                    'success'
                ).then(() => {
                    location.reload();
                });
            } else {
                Swal.fire(
                    'Error!',
                    response.data.message || 'There was an error submitting your return request.',
                    'error'
                );
            }
        })
        .catch(error => {
            console.error('There was an error submitting the return request:', error);
            Swal.fire(
                'Error!',
                'There was an error submitting your return request.',
                'error'
            );
        });
}

document.getElementById('returnForm').addEventListener('submit', function(event) {
    event.preventDefault();
    submitReturnRequest();
});

</script>

<!-- Pay Now -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    async function payNow(orderId) {
        try {
            const response = await axios.post('/payNow', { orderId });

            if (response.data.success) {
                var options = {
                    key: response.data.key,
                    amount: response.data.amount,
                    currency: "INR",
                    name: 'NEXUS',
                    description: "Payment for order",
                    image: "/images/icons/NEXfavicon.png",
                    order_id: response.data.razorpayOrderId,
                    handler: async function(response) {
                        try {
                            const updateResponse = await axios.post('/update-orderstatus', {
                                orderId: orderId,
                                paymentId: response.razorpay_payment_id,
                                signature: response.razorpay_signature
                            });

                            if (updateResponse.data.success) {
                                location.reload();
                            } else {
                                Swal.fire({
                                    title: 'Error',
                                    text: updateResponse.data.message || 'Failed to update order status.',
                                    icon: 'error'
                                });
                            }
                        } catch (error) {
                            console.error('Error updating order status:', error);
                        }
                    },
                    prefill: {
                        name: response.data.name,
                        email: response.data.email,
                        contact: response.data.phone
                    },
                    notes: {
                        address: response.data.address
                    },
                    theme: {
                        color: "#F37254"
                    },
                };

                var rzp1 = new Razorpay(options);
                rzp1.open();
            } else {
                Swal.fire({
                    title: 'Oops...',
                    text: response.data.message || 'Something went wrong!'
                });
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                title: 'Oops...',
                text: error.response?.data?.message || 'Something went wrong!'
            });
        }
    }
</script>

<style>
    @media (max-width: 767.98px) {
    #breadcrumb-container {
        padding-top: 0 !important;
    }
}
</style>