<%- include("../layout/adminHeader") %>
<%- include("../layout/adminSidebarHead") %>

<style>
.image-wrapper {
    position: relative;
    display: inline-block;
    margin-right: 10px;
    margin-bottom: 10px;
}

.existing-image {
    width: 150px;
    height: auto;
    display: block;
}

.close-button {
    position: absolute;
    top: 0;
    right: 0;
    background-color: rgb(255, 0, 0);
    color: rgb(255, 255, 255);
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    font-size: 16px;
    border-radius: 50%;
    line-height: 1;
    transition: background-color 0.3s;
}

.close-button:hover {
    background-color: darkred;
}

</style>

<div class="main-panel">
    <div class="content-wrapper">
        <div class="page-header pt-5">
            <h3 class="page-title">
                <span class="page-title-icon btn-gradient-primary text-white mr-2">
                  <i class="mdi mdi-cube-outline menu-icon"></i>
                </span>Edit Products
            </h3>
            <nav aria-label="breadcrumb">
                <ul class="breadcrumb">
                    <li class="breadcrumb-item active" aria-current="page">
                        <button class="btn btn-outline-github" onclick="location.href='/admin/products'">Back to Products</button>
                    </li>
                </ul>
            </nav>
        </div>

        <div class="col-12 grid-margin stretch-card">
            <div class="card">
                <div class="card-body">
                    <form class="forms-sample" method="POST" enctype="multipart/form-data">
                        <!-- Product Name -->
                        <div class="form-group">
                            <label for="productName">Product Name</label>
                            <input type="text" class="form-control" id="productName" name="productName" placeholder="Enter the Product Name" value="<%= product.productName %>">
                            <small id="productNameError" class="text-danger"></small>
                        </div>

                        <!-- Category -->
                        <div class="form-group">
                            <label for="category">Category</label>
                            <select class="form-control" id="category" name="categoryName">
                                <% let activeCategories = category.filter(cat => cat.status === 'active'); %>
                                <% for(let i = 0; i < activeCategories.length; i++) { %>
                                  <option value="<%= activeCategories[i].categoryName %>" <% if (product.category.toString() === activeCategories[i]._id.toString()) { %> selected <% } %>><%= activeCategories[i].categoryName %></option>
                                <% } %>
                            </select>                              
                        </div>
                        
                        <!-- Images -->
                        <div class="form-group">
                            <label>Images</label>
                            <input type="file" name="images" class="file-upload-default" accept="image/*" multiple onchange="handleFileSelect(event)" id="imageInput">
                            <div class="input-group col-xs-12">
                                <input type="text" class="form-control file-upload-info" disabled placeholder="Upload Image" id="fileCount" value="">
                                <span class="input-group-append">
                                    <button class="file-upload-browse btn btn-inverse-dark" type="button" onclick="document.getElementById('imageInput').click()">Upload</button>
                                </span>
                            </div>
                            <small id="imageError" class="text-danger"></small>
                            <br>
                            <div id="imagePreview">
                                <!-- Existing Images -->
                                <% if (product.image && product.image.length > 0) { %>
                                    <% product.image.forEach((img, index) => { %>
                                        <div class="image-wrapper" style="box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);">
                                            <img src="/productimages/<%= img %>" class="existing-image">
                                            <button type="button" class="close-button" onclick="removeImage(this, '<%= index %>')">x</button>
                                        </div>
                                    <% }); %>
                                <% } %>
                            </div>
                        </div>

                        <!-- Quantity -->
                        <div class="form-group">
                            <label for="quantity">Quantity</label>
                            <input type="number" class="form-control" id="quantity" name="quantity" placeholder="Enter the Quantity" value="<%= product.quantity %>">
                            <small id="quantityError" class="text-danger"></small>
                        </div>

                        <!-- Price -->
                        <div class="form-group">
                            <label for="price">Price</label>
                            <input type="number" class="form-control" id="price" name="price" placeholder="Enter the Price" value="<%= product.price %>">
                            <small id="priceError" class="text-danger"></small>
                        </div>

                        <!-- Highlights -->
                        <div class="form-group">
                            <label for="highlights">Highlights</label>
                            <textarea class="form-control" id="highlights" name="highlights" rows="4" placeholder="Enter each feature on a new line"><%= product.highlights.join("\n") %></textarea>
                            <small id="highlightsError" class="text-danger"></small>
                        </div>

                        <!-- Product Details -->
                        <div class="form-group">
                            <label for="productDetails">Product Details</label>
                            <textarea class="form-control" id="productDetails" name="productDetails" rows="4"><%= product.productDetails %></textarea>
                            <small id="productDetailsError" class="text-danger"></small>
                        </div>

                        <!-- Product Description -->
                        <div class="form-group">
                            <label for="productDescription">Product Description</label>
                            <textarea class="form-control" id="productDescription" name="productDescription" rows="4"><%= product.productDec %></textarea>
                            <small id="productDescriptionError" class="text-danger"></small>
                        </div>

                        <button class="btn btn-success mr-2" type="submit">Submit</button>
                        <a href="/admin/products" class="btn btn-danger">Cancel</a>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Cropper Modal -->
<div class="modal fade" id="cropModal" tabindex="-1" role="dialog" aria-labelledby="cropModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="cropModalLabel">Crop Image</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <img id="cropperImage" src="" alt="Cropper Image" style="max-width: 100%;">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="cropButton">Crop</button>
        </div>
      </div>
    </div>
</div>
  
<%- include("../layout/adminSidebarFoot") %>
<%- include("../layout/adminFooter") %>

<!-- Cropper.js library -->
<!-- Cropper.js library -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">

<script>
    function validateForm() {
        let productName = document.getElementById('productName').value.trim();
        let quantity = document.getElementById('quantity').value.trim();
        let price = document.getElementById('price').value.trim();
        let productDescription = document.getElementById('productDescription').value.trim();
        let images = document.querySelector(".file-upload-default");

        let nameRegex = /^[a-zA-Z0-9\s]+$/;
        let numberRegex = /^\d+$/;
        let priceRegex = /^\d+(\.\d{1,2})?$/;
        let isValid = true;

        document.getElementById('productNameError').innerText = '';
        document.getElementById('quantityError').innerText = '';
        document.getElementById('priceError').innerText = '';
        document.getElementById('productDescriptionError').innerText = '';
        document.getElementById('imageError').innerText = '';

        if (!nameRegex.test(productName)) {
            document.getElementById('productNameError').innerText = 'Product Name must be of only letters and numbers';
            isValid = false;
        }

        if (!quantity.match(numberRegex) || quantity < 0) {
            document.getElementById('quantityError').innerText = 'Quantity should not be a negative number';
            isValid = false;
        }

        if (!priceRegex.test(price) || price <= 0) {
            document.getElementById('priceError').innerText = 'Price must be a number greater than 0';
            isValid = false;
        }

        if (productDescription.length === 0) {
            document.getElementById('productDescriptionError').innerText = 'Product Description is required';
            isValid = false;
        }

        for (let i = 0; i < images.files.length; i++) {
            let fileName = images.files[i].name;
            let extensions = /(\.jpg|\.jpeg|\.png)$/i;
            if (!extensions.test(fileName)) {
                document.getElementById('imageError').innerText = 'Select only valid Image files (jpg/jpeg/png)';
                isValid = false;
            }
        }

        return isValid;
    }

    let deletedIndices = [];

    // Function to remove an image from the preview and mark for deletion
    function removeImage(buttonElement, index) {
        const imageWrapper = buttonElement.closest('.image-wrapper');
        imageWrapper.remove();
        deletedIndices.push(index);
    }

    function handleFileSelect(event) {
        const preview = document.getElementById('imagePreview');
        preview.innerHTML = '';

        const files = event.target.files;
        const filesAmount = files.length;

        document.getElementById('fileCount').value = filesAmount + ' files selected';

        for (let i = 0; i < filesAmount; i++) {
            const reader = new FileReader();

            reader.onload = function(event) {
                const imageWrapper = document.createElement('div');
                imageWrapper.className = 'image-wrapper';
                imageWrapper.style.position = 'relative';
                imageWrapper.style.display = 'inline-block';
                imageWrapper.style.marginRight = '10px';

                const imageElement = document.createElement('img');
                imageElement.src = event.target.result;
                imageElement.style.width = '100px';
                imageElement.style.boxShadow = '0px 4px 6px rgba(0, 0, 0, 0.1)';

                const removeButton = document.createElement('button');
                removeButton.innerText = 'x';
                removeButton.className = 'close-button';
                removeButton.style.position = 'absolute';
                removeButton.style.top = '0';
                removeButton.style.right = '0';
                removeButton.style.color = 'rgb(255, 255, 255)';
                removeButton.style.backgroundColor = 'rgb(255, 0, 0)';
                removeButton.style.border = 'none';
                removeButton.style.borderRadius = '50%';
                removeButton.style.cursor = 'pointer';
                removeButton.onclick = function() {
                    const newFiles = Array.from(files).filter((file, index) => index !== i);
                    const fileList = new DataTransfer();

                    newFiles.forEach(file => {
                        fileList.items.add(file);
                    });

                    document.getElementById('imageInput').files = fileList.files;
                    handleFileSelect({ target: document.getElementById('imageInput') });

                    document.getElementById('imageInput').value = '';
                };

                imageElement.addEventListener('click', function() {
                    const cropperModal = new bootstrap.Modal(document.getElementById('cropModal'));
                    const cropperImage = document.getElementById('cropperImage');
                    cropperImage.src = event.target.result;

                    cropperModal.show();

                    const cropper = new Cropper(cropperImage, {
                        aspectRatio: 1,
                        viewMode: 1,    
                        autoCropArea: 1,
                    });

                    // Handle crop button click
                    document.getElementById('cropButton').addEventListener('click', function() {
                        const canvas = cropper.getCroppedCanvas({
                            width: 600,
                            height: 600,
                            fillColor: '#fff',
                        });

                        // Replace the original image with the cropped image
                        imageElement.src = canvas.toDataURL();

                        // Update the File object with the cropped image data
                        canvas.toBlob(function(blob) {
                            const newFile = new File([blob], files[i].name, { type: 'image/jpeg', lastModified: Date.now() });

                            const dataTransfer = new DataTransfer();
                            for (let j = 0; j < files.length; j++) {
                                if (j !== i) {
                                    dataTransfer.items.add(files[j]);
                                } else {
                                    dataTransfer.items.add(newFile);
                                }
                            }
                            document.getElementById('imageInput').files = dataTransfer.files;

                            cropperModal.hide();
                            cropper.destroy();
                        });
                    });
                });

                imageWrapper.appendChild(imageElement);
                imageWrapper.appendChild(removeButton);
                preview.appendChild(imageWrapper);
            };

            reader.readAsDataURL(files[i]);
        }
    }

    document.querySelector('.forms-sample').addEventListener('submit', (event) => {
        event.preventDefault();
        if (validateForm()) {
            editProduct();
        }
    });

    function editProduct() {
        const form = document.querySelector('.forms-sample');
        if (deletedIndices.length > 0) {
            const deletedIndicesInput = document.createElement('input');
            deletedIndicesInput.type = 'hidden';
            deletedIndicesInput.name = 'deletedIndices';
            deletedIndicesInput.value = JSON.stringify(deletedIndices);
            form.appendChild(deletedIndicesInput);
            deletedIndices = [];
        }

        const formData = new FormData(form);

        fetch(form.action, {
            method: 'POST',
            body: formData,
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    title: 'Success!',
                    text: 'The product has been updated.',
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => {
                    window.location.href = '/admin/products';
                });
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: 'There was a problem adding the product.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        })
        .catch(error => {
            Swal.fire({
                title: 'Error!',
                text: 'An unexpected error occurred.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
    }
</script>